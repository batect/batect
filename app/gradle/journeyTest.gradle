/*
   Copyright 2017-2021 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

sourceSets {
    journeyTest {
        compileClasspath += testCommon.output
        runtimeClasspath += testCommon.output
    }
}

configurations {
    journeyTestImplementation.extendsFrom testImplementation
    journeyTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    journeyTestImplementation "ch.tutteli.atrium:atrium-fluent-en_GB:0.16.0"
}

abstract class JourneyTest extends Test {}

tasks.withType(JourneyTest).configureEach {
    group "Verification"
    testClassesDirs = sourceSets.journeyTest.output.classesDirs
    classpath = sourceSets.journeyTest.runtimeClasspath

    dependsOn journeyTestClasses
    dependsOn installShadowDist

    inputs.files installShadowDist

    environment "BATECT_ENABLE_TELEMETRY", "false"
}

def windowsTests = "batect/journeytests/windowscontainers/**"
def cleanupTests = "batect/journeytests/cleanup/**"

tasks.register("journeyTestWindowsContainers", JourneyTest) {
    description "Runs the journey tests for Windows containers."

    include windowsTests

    onlyIf { project.properties.containsKey("windowsContainers") }
}

tasks.register("journeyTestLinuxContainersParallelisable", JourneyTest) {
    description "Runs the journey tests for Linux containers that can run in parallel."

    exclude windowsTests
    exclude cleanupTests

    onlyIf { !project.properties.containsKey("windowsContainers") }

    maxParallelForks = 4
}

tasks.register("journeyTestLinuxContainersNonParallelisable", JourneyTest) {
    description "Runs the journey tests for Linux containers that cannot run in parallel."

    include cleanupTests

    onlyIf { !project.properties.containsKey("windowsContainers") }
}

tasks.register("journeyTestLinuxContainers") {
    description "Runs the journey tests for Linux containers."
    group "Verification"

    dependsOn journeyTestLinuxContainersParallelisable
    dependsOn journeyTestLinuxContainersNonParallelisable
}

tasks.register("journeyTest") {
    description "Runs the journey tests."
    group "Verification"

    dependsOn journeyTestWindowsContainers
    dependsOn journeyTestLinuxContainers
}

checkJourneyTestNaming {
    ignoreFileNameCheck = fileTree(
            dir: "src/journeyTest/kotlin",
            includes: [
                    "batect/journeytests/testutils/**",
            ]
    )
}
