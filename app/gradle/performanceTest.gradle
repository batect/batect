/*
   Copyright 2017-2020 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import batect.buildtools.performance.PerformanceTestPlugin
import batect.buildtools.performance.PerformanceTestScenario

apply plugin: PerformanceTestPlugin

sourceSets {
    performanceTest {}
}

task versionPerformanceScenario(type: PerformanceTestScenario) {
    description = "Run ./batect --version"
    args = ["--version"]
}

def outputOptions = [
    '--output=simple': 'Simple',
    '--output=quiet': 'Quiet',
    '--output=fancy': 'Fancy'
]

outputOptions.each { option, name ->
    task "singleContainerExistingImage${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that starts a single container (which uses an image that has been pulled) in ${name.toLowerCase()} output mode"
        before = ["docker pull alpine:3.7"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/single-container-existing-image"
    }

    task "singleContainerBuiltImage${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that starts a single container (which uses an image that has been built) in ${name.toLowerCase()} output mode"
        before = ["docker build containers/test-env"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/single-container-built-image"
    }

    task "containerChainSameImage${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that starts a container which has a chain of dependencies A->B->C (all of which use the same image that has already been pulled) in ${name.toLowerCase()} output mode"
        before = ["docker pull alpine:3.7"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/container-dependency-chain-same-image"
    }

    task "containerChainDifferentImages${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that starts a container which has a chain of dependencies A->B->C (each of which use different images that have already been pulled) in ${name.toLowerCase()} output mode"
        before = ["docker pull alpine:3.7", "docker pull alpine:3.6", "docker pull alpine:3.5"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/container-dependency-chain-different-images"
    }

    task "containerTwoDependenciesSameImage${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that starts a container which has a two direct dependencies B and C (all of which use the same image that has already been pulled) in ${name.toLowerCase()} output mode"
        before = ["docker pull alpine:3.7"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/container-two-dependencies-same-image"
    }

    task "containerTwoDependenciesDifferentImages${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that starts a container which has a two direct dependencies B and C (each of which use different images that have already been pulled) in ${name.toLowerCase()} output mode"
        before = ["docker pull alpine:3.7", "docker pull alpine:3.6", "docker pull alpine:3.5"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/container-two-dependencies-different-images"
    }

    task "taskWithTwoPrerequisites${name}OutputScenario"(type: PerformanceTestScenario) {
        description = "Run a task that has two prerequisites in ${name.toLowerCase()} output mode"
        before = ["docker pull alpine:3.7"]
        args = [option, "the-task"]
        workingDirectory = "src/performanceTest/resources/task-two-prerequisites"
    }
}

tasks.withType(PerformanceTestScenario) {
    dependsOn "installShadowDist"
    executable = tasks.getByName("installShadowDist").outputs.files.singleFile.toPath().resolve("bin/batect").toFile()
}
