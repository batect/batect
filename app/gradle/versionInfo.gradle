/*
   Copyright 2017-2020 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import java.nio.file.Paths
import java.text.SimpleDateFormat

String getBuildDate() {
    if (rootProject.isReleaseBuild) {
        def dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z")
        dateFormat.setTimeZone(new SimpleTimeZone(SimpleTimeZone.UTC_TIME, "UTC"))
        return dateFormat.format(new Date())
    } else {
        return "(the build date is not populated for development builds)"
    }
}

String versionInfoFileContents() {
    kotlinLicenseHeader +
    """ |package batect
        |
        |import batect.logging.LogMessageBuilder
        |import batect.utils.Version
        |import kotlinx.serialization.Serializable
        |
        |// This file is generated automatically by the $generateVersionInfoFile.name Gradle task.
        |// Do not edit it (it will be overwritten on the next build anyway).
        |// Do not commit it.
        |@Serializable
        |class VersionInfo {
        |    val gitCommitHash = "${rootProject.gitCommitHash}"
        |    val gitCommitDate = "${rootProject.gitCommitHumanDate}"
        |    val version = Version.parse("${rootProject.simpleVersion}")
        |    val buildDate = "${getBuildDate()}"
        |}
        |
        |fun LogMessageBuilder.data(key: String, value: VersionInfo) = this.data(key, value, VersionInfo.serializer())
        |""".stripMargin("|")
}

def versionInfoFile = Paths.get("$projectDir/src/main/kotlin/batect/VersionInfo.kt").toFile()

task generateVersionInfoFile {
    description 'Generates the version info file that is compiled into the application.'
    group 'Build'

    inputs.property("version", { rootProject.simpleVersion })
    inputs.property("gitCommitHash", { rootProject.gitCommitHash })
    inputs.property("gitCommitHumanDate", { rootProject.gitCommitHumanDate })
    inputs.property("buildDate", { getBuildDate() })
    outputs.file versionInfoFile

    doLast {
        def text = versionInfoFileContents()
        versionInfoFile.text = text
    }
}

compileKotlin.dependsOn generateVersionInfoFile

task cleanVersionInfo(type: Delete) {
    description 'Removes the generated version info file.'
    group 'Other'

    delete versionInfoFile
}

clean.dependsOn cleanVersionInfo
