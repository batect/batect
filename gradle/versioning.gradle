/*
   Copyright 2017-2020 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

apply from: "$rootDir/gradle/utilities.gradle"

task validateVersionMatchesTag {
    description 'Validates that the version currently configured in Gradle matches the current Git commit tag.'
    group 'Verification'

    doLast {
        def gitTag = runProcess("git", "describe", "--dirty", "--candidates=0")

        if (gitTag.contains("-dirty")) {
            throw new Exception("The working copy is dirty.")
        }

        if (gitTag != project.version.toString()) {
            throw new Exception("The tag for this commit is '$gitTag', but the project version is set to '$project.version'.")
        }
    }
}

task validateIsReleaseBuild {
    description 'Validates that the current build is a release build.'
    group 'Verification'

    doLast {
        if (!isReleaseBuild()) {
            throw new Exception("The current build is not a release build.")
        }
    }
}

task validateRelease {
    description 'Validates that the current commit is ready to be released.'
    group 'Verification'

    dependsOn validateVersionMatchesTag
    dependsOn validateIsReleaseBuild
}

reckon {
    scopeFromProp()
    stageFromProp('dev', 'final')
}

String getCurrentGitCommitHash() {
    return runProcess('git', 'describe', '--always', '--dirty', '--exclude', '*', '--abbrev=0')
}

String getCurrentGitCommitHumanDate() {
    return runProcess('git', 'show', '-s', '--format=%ci', 'HEAD')
}

String getCurrentGitCommitISO8601Date() {
    return runProcess('git', 'show', '-s', '--format=%cI', 'HEAD')
}

boolean isReleaseBuild() {
    return !project.version.toString().contains("-")
}

String getSimpleVersion() {
    def generatedVersion = project.version.toString()

    if (generatedVersion.contains("+")) {
        return generatedVersion.substring(0, generatedVersion.indexOf("+"))
    } else {
        return generatedVersion
    }
}

ext {
    gitCommitHash = getCurrentGitCommitHash()
    gitCommitHumanDate = getCurrentGitCommitHumanDate()
    gitCommitISO8601Date = getCurrentGitCommitISO8601Date()
    isReleaseBuild = isReleaseBuild()
    simpleVersion = getSimpleVersion()
}
