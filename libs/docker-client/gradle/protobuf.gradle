/*
    Copyright 2017-2021 Charles Korn.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import groovy.transform.EqualsAndHashCode

import java.nio.charset.StandardCharsets
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path

apply plugin: 'com.squareup.wire'

@EqualsAndHashCode
class ProtoDownloadSpec implements Serializable {
    final String sourcePath
    final String version
    final String sourceUrl
    final Closure<String> transform

    ProtoDownloadSpec(String sourcePath, String version, Closure<String> transform = null) {
        this.sourcePath = sourcePath
        this.version = version
        this.transform = transform

        if (!sourcePath.startsWith("github.com")) {
            throw RuntimeException("Protobuf path $path is not from github.com")
        }

        def sourceSegments = sourcePath.split("/")
        def sourceRepo = sourceSegments.drop(1).take(2).join("/")
        def filePath = sourceSegments.drop(3).join("/")
        this.sourceUrl = "https://raw.githubusercontent.com/$sourceRepo/$version/$filePath"
    }

    Path resolveDestination(Path protosDir) {
        return protosDir.resolve(sourcePath.replace("/", FileSystems.default.separator))
    }

    private static void writeObject(ObjectOutputStream s) throws IOException {
        s.defaultWriteObject();
    }

    private static void readObject(ObjectInputStream s) throws IOException {
        s.defaultReadObject();
    }
}

def buildKitVersion = "v0.9.0"

def replaceRelativeImportPathWithAbsolute = { String oldContent ->
    oldContent.replace('import "stat.proto";', 'import "github.com/tonistiigi/fsutil/types/stat.proto";')
}

def protos = [
    new ProtoDownloadSpec("github.com/moby/buildkit/api/services/control/control.proto", buildKitVersion),
    new ProtoDownloadSpec("github.com/moby/buildkit/api/types/worker.proto"            , buildKitVersion),
    new ProtoDownloadSpec("github.com/moby/buildkit/session/auth/auth.proto"           , buildKitVersion),
    new ProtoDownloadSpec("github.com/moby/buildkit/session/filesync/filesync.proto"   , buildKitVersion),
    new ProtoDownloadSpec("github.com/moby/buildkit/solver/pb/ops.proto"               , buildKitVersion),
    new ProtoDownloadSpec("github.com/gogo/protobuf/gogoproto/gogo.proto"              , "v1.3.2"),
    new ProtoDownloadSpec("github.com/grpc/grpc-proto/grpc/health/v1/health.proto"     , "14b8f3e1181ed6fc484a033d3cbb912e7e7c6750"),
    new ProtoDownloadSpec("github.com/tonistiigi/fsutil/types/stat.proto"              , "0834f99b7b85462efb69b4f571a4fa3ca7da5ac9"),
    new ProtoDownloadSpec("github.com/tonistiigi/fsutil/types/wire.proto"              , "0834f99b7b85462efb69b4f571a4fa3ca7da5ac9", replaceRelativeImportPathWithAbsolute)
]

def protosDir = project.buildDir.toPath().resolve("protos")

task downloadProtos() {
    inputs.property("sourceUrls", { protos.collect { it.sourceUrl } })
    outputs.files({ protos.collect { it.resolveDestination(protosDir) } })

    doLast {
        protosDir.toFile().deleteDir()

        protos.forEach { proto ->
            def destination = proto.resolveDestination(protosDir)

            download {
                src proto.sourceUrl
                dest destination.toFile()
                overwrite true
            }

            if (proto.transform != null) {
                def oldContent = new String(Files.readAllBytes(destination))
                def newContent = proto.transform.call(oldContent)
                Files.write(destination, newContent.getBytes(StandardCharsets.UTF_8))
            }
        }
    }
}

wire.sourcePath {
    srcDir protosDir.toString()
}

wire.root('moby.buildkit.v1.StatusResponse')
wire.root('moby.filesync.v1.Auth')
wire.root('moby.filesync.v1.FileSync')
wire.root('grpc.health.v1.Health')
wire.root('fsutil.types.Packet')

wire.kotlin {
    rpcCallStyle = 'blocking'
    rpcRole = 'server'
    out = 'src/generated/protos'
}

afterEvaluate {
    tasks.named("generateMainProtos").configure {
        dependsOn downloadProtos
    }
}
