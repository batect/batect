/*
   Copyright 2017-2021 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import java.nio.file.FileSystems

apply plugin: 'com.squareup.wire'

def protosDir = project.buildDir.toPath().resolve("protos")
def buildKitVersion = "v0.8.2"

def protos = [
    "github.com/moby/buildkit/api/services/control/control.proto": buildKitVersion,
    "github.com/moby/buildkit/api/types/worker.proto"            : buildKitVersion,
    "github.com/moby/buildkit/session/auth/auth.proto"           : buildKitVersion,
    "github.com/moby/buildkit/solver/pb/ops.proto"               : buildKitVersion,
    "github.com/gogo/protobuf/gogoproto/gogo.proto"              : "v1.3.2",
    "github.com/grpc/grpc-proto/grpc/health/v1/health.proto"     : "92099ce"
]

task downloadProtos() {
    def sourceDestinationPairs = [:]

    protos.forEach { path, version ->
        if (!path.startsWith("github.com")) {
            throw RuntimeException("Protobuf path $path is not from github.com")
        }

        def sourceSegments = path.split("/")
        def sourceRepo = sourceSegments.drop(1).take(2).join("/")
        def sourcePath = sourceSegments.drop(3).join("/")
        def sourceUrl = "https://raw.githubusercontent.com/$sourceRepo/$version/$sourcePath"
        def destinationPath = protosDir.resolve("github.com/$sourceRepo/$sourcePath".replace("/", FileSystems.default.separator)).toString()

        sourceDestinationPairs[sourceUrl] = destinationPath
    }

    inputs.property("protos", { protos })
    inputs.property("sourceDestinationPairs", { sourceDestinationPairs })
    outputs.files(sourceDestinationPairs.values())

    doLast {
        protosDir.toFile().deleteDir()

        sourceDestinationPairs.forEach { sourceUrl, destinationPath ->
            download {
                src sourceUrl
                dest destinationPath
                overwrite true
            }
        }
    }
}

wire.sourcePath {
    srcDir protosDir.toString()
}

wire.root('moby.buildkit.v1.StatusResponse')
wire.root('moby.filesync.v1.Auth')
wire.root('grpc.health.v1.Health')

wire.kotlin {
    rpcCallStyle = 'blocking'
    rpcRole = 'server'
    out = 'src/generated/protos'
}

afterEvaluate {
    tasks.named("generateMainProtos").configure {
        dependsOn downloadProtos
    }
}
