// Code generated by Wire protocol buffer compiler, do not edit.
// Source: moby.buildkit.v1.VertexLog in github.com/moby/buildkit/api/services/control/control.proto
package moby.buildkit.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Instant
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

public class VertexLog(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val vertex: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val timestamp: Instant? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val stream: Long = 0L,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val msg: ByteString = ByteString.EMPTY,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VertexLog, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw AssertionError()

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VertexLog) return false
    if (unknownFields != other.unknownFields) return false
    if (vertex != other.vertex) return false
    if (timestamp != other.timestamp) return false
    if (stream != other.stream) return false
    if (msg != other.msg) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + vertex.hashCode()
      result = result * 37 + timestamp.hashCode()
      result = result * 37 + stream.hashCode()
      result = result * 37 + msg.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """vertex=${sanitize(vertex)}"""
    if (timestamp != null) result += """timestamp=$timestamp"""
    result += """stream=$stream"""
    result += """msg=$msg"""
    return result.joinToString(prefix = "VertexLog{", separator = ", ", postfix = "}")
  }

  public fun copy(
    vertex: String = this.vertex,
    timestamp: Instant? = this.timestamp,
    stream: Long = this.stream,
    msg: ByteString = this.msg,
    unknownFields: ByteString = this.unknownFields
  ): VertexLog = VertexLog(vertex, timestamp, stream, msg, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<VertexLog> = object : ProtoAdapter<VertexLog>(
      FieldEncoding.LENGTH_DELIMITED, 
      VertexLog::class, 
      "type.googleapis.com/moby.buildkit.v1.VertexLog", 
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(value: VertexLog): Int {
        var size = value.unknownFields.size
        if (value.vertex != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.vertex)
        if (value.timestamp != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(2,
            value.timestamp)
        if (value.stream != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(3, value.stream)
        if (value.msg != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(4,
            value.msg)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: VertexLog): Unit {
        if (value.vertex != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.vertex)
        if (value.timestamp != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 2, value.timestamp)
        if (value.stream != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.stream)
        if (value.msg != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.msg)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): VertexLog {
        var vertex: String = ""
        var timestamp: Instant? = null
        var stream: Long = 0L
        var msg: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> vertex = ProtoAdapter.STRING.decode(reader)
            2 -> timestamp = ProtoAdapter.INSTANT.decode(reader)
            3 -> stream = ProtoAdapter.INT64.decode(reader)
            4 -> msg = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return VertexLog(
          vertex = vertex,
          timestamp = timestamp,
          stream = stream,
          msg = msg,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: VertexLog): VertexLog = value.copy(
        timestamp = value.timestamp?.let(ProtoAdapter.INSTANT::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
