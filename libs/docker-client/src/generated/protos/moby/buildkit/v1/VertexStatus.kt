// Code generated by Wire protocol buffer compiler, do not edit.
// Source: moby.buildkit.v1.VertexStatus in github.com/moby/buildkit/api/services/control/control.proto
package moby.buildkit.v1

import com.google.protobuf.CustomtypeOption
import com.google.protobuf.NullableOption
import com.google.protobuf.StdtimeOption
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Instant
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class VertexStatus(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val ID: String = "",
  @CustomtypeOption("github.com/opencontainers/go-digest.Digest")
  @NullableOption(false)
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val vertex: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val name: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val current: Long = 0L,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val total: Long = 0L,
  /**
   * TODO: add started, completed
   */
  @StdtimeOption(true)
  @NullableOption(false)
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val timestamp: Instant? = null,
  @StdtimeOption(true)
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val started: Instant? = null,
  @StdtimeOption(true)
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val completed: Instant? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VertexStatus, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VertexStatus) return false
    if (unknownFields != other.unknownFields) return false
    if (ID != other.ID) return false
    if (vertex != other.vertex) return false
    if (name != other.name) return false
    if (current != other.current) return false
    if (total != other.total) return false
    if (timestamp != other.timestamp) return false
    if (started != other.started) return false
    if (completed != other.completed) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + ID.hashCode()
      result = result * 37 + vertex.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + current.hashCode()
      result = result * 37 + total.hashCode()
      result = result * 37 + (timestamp?.hashCode() ?: 0)
      result = result * 37 + (started?.hashCode() ?: 0)
      result = result * 37 + (completed?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """ID=${sanitize(ID)}"""
    result += """vertex=${sanitize(vertex)}"""
    result += """name=${sanitize(name)}"""
    result += """current=$current"""
    result += """total=$total"""
    if (timestamp != null) result += """timestamp=$timestamp"""
    if (started != null) result += """started=$started"""
    if (completed != null) result += """completed=$completed"""
    return result.joinToString(prefix = "VertexStatus{", separator = ", ", postfix = "}")
  }

  public fun copy(
    ID: String = this.ID,
    vertex: String = this.vertex,
    name: String = this.name,
    current: Long = this.current,
    total: Long = this.total,
    timestamp: Instant? = this.timestamp,
    started: Instant? = this.started,
    completed: Instant? = this.completed,
    unknownFields: ByteString = this.unknownFields
  ): VertexStatus = VertexStatus(ID, vertex, name, current, total, timestamp, started, completed,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<VertexStatus> = object : ProtoAdapter<VertexStatus>(
      FieldEncoding.LENGTH_DELIMITED, 
      VertexStatus::class, 
      "type.googleapis.com/moby.buildkit.v1.VertexStatus", 
      PROTO_3, 
      null, 
      "github.com/moby/buildkit/api/services/control/control.proto"
    ) {
      public override fun encodedSize(`value`: VertexStatus): Int {
        var size = value.unknownFields.size
        if (value.ID != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.ID)
        if (value.vertex != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.vertex)
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.name)
        if (value.current != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4, value.current)
        if (value.total != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(5, value.total)
        if (value.timestamp != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(6,
            value.timestamp)
        if (value.started != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(7, value.started)
        if (value.completed != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(8,
            value.completed)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: VertexStatus): Unit {
        if (value.ID != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ID)
        if (value.vertex != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.vertex)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.name)
        if (value.current != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.current)
        if (value.total != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.total)
        if (value.timestamp != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 6, value.timestamp)
        if (value.started != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 7, value.started)
        if (value.completed != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 8, value.completed)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: VertexStatus): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.completed != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 8, value.completed)
        if (value.started != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 7, value.started)
        if (value.timestamp != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 6, value.timestamp)
        if (value.total != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.total)
        if (value.current != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.current)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.name)
        if (value.vertex != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.vertex)
        if (value.ID != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ID)
      }

      public override fun decode(reader: ProtoReader): VertexStatus {
        var ID: String = ""
        var vertex: String = ""
        var name: String = ""
        var current: Long = 0L
        var total: Long = 0L
        var timestamp: Instant? = null
        var started: Instant? = null
        var completed: Instant? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> ID = ProtoAdapter.STRING.decode(reader)
            2 -> vertex = ProtoAdapter.STRING.decode(reader)
            3 -> name = ProtoAdapter.STRING.decode(reader)
            4 -> current = ProtoAdapter.INT64.decode(reader)
            5 -> total = ProtoAdapter.INT64.decode(reader)
            6 -> timestamp = ProtoAdapter.INSTANT.decode(reader)
            7 -> started = ProtoAdapter.INSTANT.decode(reader)
            8 -> completed = ProtoAdapter.INSTANT.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return VertexStatus(
          ID = ID,
          vertex = vertex,
          name = name,
          current = current,
          total = total,
          timestamp = timestamp,
          started = started,
          completed = completed,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: VertexStatus): VertexStatus = value.copy(
        timestamp = value.timestamp?.let(ProtoAdapter.INSTANT::redact),
        started = value.started?.let(ProtoAdapter.INSTANT::redact),
        completed = value.completed?.let(ProtoAdapter.INSTANT::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
