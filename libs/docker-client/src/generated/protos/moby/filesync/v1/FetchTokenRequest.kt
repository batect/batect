// Code generated by Wire protocol buffer compiler, do not edit.
// Source: moby.filesync.v1.FetchTokenRequest in github.com/moby/buildkit/session/auth/auth.proto
package moby.filesync.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

public class FetchTokenRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val ClientID: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val Host: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val Realm: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val Service: String = "",
  Scopes: List<String> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<FetchTokenRequest, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  public val Scopes: List<String> = immutableCopyOf("Scopes", Scopes)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FetchTokenRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (ClientID != other.ClientID) return false
    if (Host != other.Host) return false
    if (Realm != other.Realm) return false
    if (Service != other.Service) return false
    if (Scopes != other.Scopes) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + ClientID.hashCode()
      result = result * 37 + Host.hashCode()
      result = result * 37 + Realm.hashCode()
      result = result * 37 + Service.hashCode()
      result = result * 37 + Scopes.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """ClientID=${sanitize(ClientID)}"""
    result += """Host=${sanitize(Host)}"""
    result += """Realm=${sanitize(Realm)}"""
    result += """Service=${sanitize(Service)}"""
    if (Scopes.isNotEmpty()) result += """Scopes=${sanitize(Scopes)}"""
    return result.joinToString(prefix = "FetchTokenRequest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    ClientID: String = this.ClientID,
    Host: String = this.Host,
    Realm: String = this.Realm,
    Service: String = this.Service,
    Scopes: List<String> = this.Scopes,
    unknownFields: ByteString = this.unknownFields
  ): FetchTokenRequest = FetchTokenRequest(ClientID, Host, Realm, Service, Scopes, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FetchTokenRequest> = object : ProtoAdapter<FetchTokenRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      FetchTokenRequest::class, 
      "type.googleapis.com/moby.filesync.v1.FetchTokenRequest", 
      PROTO_3, 
      null, 
      "github.com/moby/buildkit/session/auth/auth.proto"
    ) {
      public override fun encodedSize(`value`: FetchTokenRequest): Int {
        var size = value.unknownFields.size
        if (value.ClientID != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.ClientID)
        if (value.Host != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.Host)
        if (value.Realm != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.Realm)
        if (value.Service != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.Service)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(5, value.Scopes)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: FetchTokenRequest): Unit {
        if (value.ClientID != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ClientID)
        if (value.Host != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.Host)
        if (value.Realm != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.Realm)
        if (value.Service != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.Service)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 5, value.Scopes)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: FetchTokenRequest): Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 5, value.Scopes)
        if (value.Service != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.Service)
        if (value.Realm != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.Realm)
        if (value.Host != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.Host)
        if (value.ClientID != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ClientID)
      }

      public override fun decode(reader: ProtoReader): FetchTokenRequest {
        var ClientID: String = ""
        var Host: String = ""
        var Realm: String = ""
        var Service: String = ""
        val Scopes = mutableListOf<String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> ClientID = ProtoAdapter.STRING.decode(reader)
            2 -> Host = ProtoAdapter.STRING.decode(reader)
            3 -> Realm = ProtoAdapter.STRING.decode(reader)
            4 -> Service = ProtoAdapter.STRING.decode(reader)
            5 -> Scopes.add(ProtoAdapter.STRING.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return FetchTokenRequest(
          ClientID = ClientID,
          Host = Host,
          Realm = Realm,
          Service = Service,
          Scopes = Scopes,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: FetchTokenRequest): FetchTokenRequest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
