/*
   Copyright 2017-2020 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import java.nio.file.Files
import org.apache.tools.ant.taskdefs.condition.Os

def powershellTemplateFile = project.file 'src/template.ps1'
def batchTemplateFile = project.file 'src/template.cmd'

task build {
    description 'Build the wrapper script.'
    group 'Build'

    def scriptDir = getBuildDir().toPath().resolve("scripts")
    def scriptFile = scriptDir.resolve(rootProject.name + ".cmd")

    inputs.file powershellTemplateFile
    inputs.file batchTemplateFile
    inputs.property("version", { version.toString() })
    outputs.file scriptFile

    doLast {
        def powershellScript = powershellTemplateFile.text
            .replace("VERSION-GOES-HERE", version.toString())

        def escapedPowershellScript = powershellScript
            .replace('|', '^|')
            .replace('%', '%%')
            .split("\r\n")
            .join("^\r\n\r\n")

        Files.createDirectories scriptDir

        scriptFile.text = batchTemplateFile.text
            .replace("POWERSHELL-SCRIPT-GOES-HERE", escapedPowershellScript)
            .replace("VERSION-GOES-HERE", version.toString())
    }
}

task copyTestJar(type: Copy) {
    description 'Copies the test application JAR into place for use during the wrapper script tests.'
    group 'Build'

    from project(":wrapper:testapp").getTasksByName("jar", false)
    into "test"
}

task test(type: Exec) {
    description 'Runs the unit tests.'
    group 'Verification'

    def upToDateFile = getTemporaryDir().toPath().resolve("lastRun")

    inputs.files build
    inputs.files copyTestJar
    inputs.files fileTree(dir: 'test', include: '**/*')
    outputs.file upToDateFile

    def executableName = Os.isFamily(Os.FAMILY_WINDOWS) ? 'python' : 'python3'

    commandLine executableName, './test/tests.py'

    doLast {
        // Based on https://stackoverflow.com/questions/1406473/simulate-touch-command-with-java
        upToDateFile.text = System.currentTimeMillis()
    }
}

task check {
    description 'Runs all checks.'
    group 'Verification'

    dependsOn test
    dependsOn build
}
